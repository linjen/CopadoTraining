 #package.xml file is recreated on the fly by Copado, no need to track unnecessary changes of this file 
2  package.xml 
3  
 
4  #Managed packages can trigger the installation or uninstallation of applications, it is   
5  #recommended to manage this outside git 
6  
 
7  installedPackages/* 
8  
 
9  #if you are not customizing a managed package, you can keep your repository clean by ignoring  
10  #all files for that package. For example, to ignore all files of the "Copado" managed package 
11  #just add to your gitignore file the following text: *copado__* 
12  #if you will be customizing managed packages, make sure that the same version of the package  
13  #is installed on all your environments so that deployments will only update existing  
14  #managed components. Creation of managed components is not permitted by the API. 
15  #It is recommended that you ignore managed components that cannot be modified  
16  #since there is no need to track them in Git, like for example: 
17  
 
18  classes/copado__* 
19  triggers/copado__* 
20  pages/copado__* 
21  
 
22  #Translations are complex since get updated indirectly across multiple files, they can make a deployment fail 
23  #if a field is translated in source and it doesn't exist on destination.  
24  #If you are committing incrementally new fields and new Translations you can track them in Git, just be careful.  
25  #If you choose  to ignore them in Git, you can always create a deployment with the Copado Deployer "Translation" Step.  
26  
 
27  # translations/* 
28  # objectTranslations/* 
29  
 
30  #Sites which has Domain mapping has environment specific information.  
31  #Make sure you setup Copado Environment Variables to make sites config files environment agnostic. 
32  #Until the above is achieved, you can ignore them as follows 
33  
 
34  # sites/* 
35  # siteDotComSites/* 
